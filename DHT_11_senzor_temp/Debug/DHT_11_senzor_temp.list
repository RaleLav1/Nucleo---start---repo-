
DHT_11_senzor_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800315c  0800315c  0000415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003174  08003174  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003174  08003174  00004174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800317c  0800317c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800317c  0800317c  0000417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003180  08003180  00004180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003184  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003190  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003190  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1f3  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cde  00000000  00000000  0001122f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00012f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000935  00000000  00000000  00013ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015aa8  00000000  00000000  0001440d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb1  00000000  00000000  00029eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899e0  00000000  00000000  00037e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  000c188c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c4aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003144 	.word	0x08003144

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003144 	.word	0x08003144

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_uldivmod>:
 8000a10:	b953      	cbnz	r3, 8000a28 <__aeabi_uldivmod+0x18>
 8000a12:	b94a      	cbnz	r2, 8000a28 <__aeabi_uldivmod+0x18>
 8000a14:	2900      	cmp	r1, #0
 8000a16:	bf08      	it	eq
 8000a18:	2800      	cmpeq	r0, #0
 8000a1a:	bf1c      	itt	ne
 8000a1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a20:	f04f 30ff 	movne.w	r0, #4294967295
 8000a24:	f000 b96a 	b.w	8000cfc <__aeabi_idiv0>
 8000a28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a30:	f000 f806 	bl	8000a40 <__udivmoddi4>
 8000a34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a3c:	b004      	add	sp, #16
 8000a3e:	4770      	bx	lr

08000a40 <__udivmoddi4>:
 8000a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a44:	9d08      	ldr	r5, [sp, #32]
 8000a46:	460c      	mov	r4, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14e      	bne.n	8000aea <__udivmoddi4+0xaa>
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	458c      	cmp	ip, r1
 8000a50:	4686      	mov	lr, r0
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	d962      	bls.n	8000b1e <__udivmoddi4+0xde>
 8000a58:	b14a      	cbz	r2, 8000a6e <__udivmoddi4+0x2e>
 8000a5a:	f1c2 0320 	rsb	r3, r2, #32
 8000a5e:	4091      	lsls	r1, r2
 8000a60:	fa20 f303 	lsr.w	r3, r0, r3
 8000a64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a68:	4319      	orrs	r1, r3
 8000a6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a72:	fa1f f68c 	uxth.w	r6, ip
 8000a76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb04 f106 	mul.w	r1, r4, r6
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x64>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a96:	f080 8112 	bcs.w	8000cbe <__udivmoddi4+0x27e>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 810f 	bls.w	8000cbe <__udivmoddi4+0x27e>
 8000aa0:	3c02      	subs	r4, #2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	1a59      	subs	r1, r3, r1
 8000aa6:	fa1f f38e 	uxth.w	r3, lr
 8000aaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aae:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab6:	fb00 f606 	mul.w	r6, r0, r6
 8000aba:	429e      	cmp	r6, r3
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x94>
 8000abe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac6:	f080 80fc 	bcs.w	8000cc2 <__udivmoddi4+0x282>
 8000aca:	429e      	cmp	r6, r3
 8000acc:	f240 80f9 	bls.w	8000cc2 <__udivmoddi4+0x282>
 8000ad0:	4463      	add	r3, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11d      	cbz	r5, 8000ae6 <__udivmoddi4+0xa6>
 8000ade:	40d3      	lsrs	r3, r2
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d905      	bls.n	8000afa <__udivmoddi4+0xba>
 8000aee:	b10d      	cbz	r5, 8000af4 <__udivmoddi4+0xb4>
 8000af0:	e9c5 0100 	strd	r0, r1, [r5]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4608      	mov	r0, r1
 8000af8:	e7f5      	b.n	8000ae6 <__udivmoddi4+0xa6>
 8000afa:	fab3 f183 	clz	r1, r3
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d146      	bne.n	8000b90 <__udivmoddi4+0x150>
 8000b02:	42a3      	cmp	r3, r4
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xcc>
 8000b06:	4290      	cmp	r0, r2
 8000b08:	f0c0 80f0 	bcc.w	8000cec <__udivmoddi4+0x2ac>
 8000b0c:	1a86      	subs	r6, r0, r2
 8000b0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d0e6      	beq.n	8000ae6 <__udivmoddi4+0xa6>
 8000b18:	e9c5 6300 	strd	r6, r3, [r5]
 8000b1c:	e7e3      	b.n	8000ae6 <__udivmoddi4+0xa6>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x204>
 8000b24:	eba1 040c 	sub.w	r4, r1, ip
 8000b28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	2101      	movs	r1, #1
 8000b32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb07 f006 	mul.w	r0, r7, r6
 8000b46:	4298      	cmp	r0, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x11c>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x11a>
 8000b54:	4298      	cmp	r0, r3
 8000b56:	f200 80cd 	bhi.w	8000cf4 <__udivmoddi4+0x2b4>
 8000b5a:	4626      	mov	r6, r4
 8000b5c:	1a1c      	subs	r4, r3, r0
 8000b5e:	fa1f f38e 	uxth.w	r3, lr
 8000b62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b66:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6e:	fb00 f707 	mul.w	r7, r0, r7
 8000b72:	429f      	cmp	r7, r3
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x148>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x146>
 8000b80:	429f      	cmp	r7, r3
 8000b82:	f200 80b0 	bhi.w	8000ce6 <__udivmoddi4+0x2a6>
 8000b86:	4620      	mov	r0, r4
 8000b88:	1bdb      	subs	r3, r3, r7
 8000b8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0x9c>
 8000b90:	f1c1 0620 	rsb	r6, r1, #32
 8000b94:	408b      	lsls	r3, r1
 8000b96:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9a:	431f      	orrs	r7, r3
 8000b9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba4:	ea43 030c 	orr.w	r3, r3, ip
 8000ba8:	40f4      	lsrs	r4, r6
 8000baa:	fa00 f801 	lsl.w	r8, r0, r1
 8000bae:	0c38      	lsrs	r0, r7, #16
 8000bb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb8:	fa1f fc87 	uxth.w	ip, r7
 8000bbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc8:	45a1      	cmp	r9, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x1a6>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bd6:	f080 8084 	bcs.w	8000ce2 <__udivmoddi4+0x2a2>
 8000bda:	45a1      	cmp	r9, r4
 8000bdc:	f240 8081 	bls.w	8000ce2 <__udivmoddi4+0x2a2>
 8000be0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	eba4 0409 	sub.w	r4, r4, r9
 8000bea:	fa1f f983 	uxth.w	r9, r3
 8000bee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf2:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x1d2>
 8000c02:	193c      	adds	r4, r7, r4
 8000c04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c08:	d267      	bcs.n	8000cda <__udivmoddi4+0x29a>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0x29a>
 8000c0e:	3b02      	subs	r3, #2
 8000c10:	443c      	add	r4, r7
 8000c12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c16:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1a:	eba4 040c 	sub.w	r4, r4, ip
 8000c1e:	429c      	cmp	r4, r3
 8000c20:	46ce      	mov	lr, r9
 8000c22:	469c      	mov	ip, r3
 8000c24:	d351      	bcc.n	8000cca <__udivmoddi4+0x28a>
 8000c26:	d04e      	beq.n	8000cc6 <__udivmoddi4+0x286>
 8000c28:	b155      	cbz	r5, 8000c40 <__udivmoddi4+0x200>
 8000c2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c32:	fa04 f606 	lsl.w	r6, r4, r6
 8000c36:	40cb      	lsrs	r3, r1
 8000c38:	431e      	orrs	r6, r3
 8000c3a:	40cc      	lsrs	r4, r1
 8000c3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	e750      	b.n	8000ae6 <__udivmoddi4+0xa6>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f103 	lsr.w	r1, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa24 f303 	lsr.w	r3, r4, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	430c      	orrs	r4, r1
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3110 	mls	r1, r8, r0, r3
 8000c6c:	0c23      	lsrs	r3, r4, #16
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f107 	mul.w	r1, r0, r7
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x24c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c82:	d22c      	bcs.n	8000cde <__udivmoddi4+0x29e>
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d92a      	bls.n	8000cde <__udivmoddi4+0x29e>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c94:	fb08 3311 	mls	r3, r8, r1, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x276>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cac:	d213      	bcs.n	8000cd6 <__udivmoddi4+0x296>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d911      	bls.n	8000cd6 <__udivmoddi4+0x296>
 8000cb2:	3902      	subs	r1, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	1ae4      	subs	r4, r4, r3
 8000cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cbc:	e739      	b.n	8000b32 <__udivmoddi4+0xf2>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	e6f0      	b.n	8000aa4 <__udivmoddi4+0x64>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e706      	b.n	8000ad4 <__udivmoddi4+0x94>
 8000cc6:	45c8      	cmp	r8, r9
 8000cc8:	d2ae      	bcs.n	8000c28 <__udivmoddi4+0x1e8>
 8000cca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cce:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd2:	3801      	subs	r0, #1
 8000cd4:	e7a8      	b.n	8000c28 <__udivmoddi4+0x1e8>
 8000cd6:	4631      	mov	r1, r6
 8000cd8:	e7ed      	b.n	8000cb6 <__udivmoddi4+0x276>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	e799      	b.n	8000c12 <__udivmoddi4+0x1d2>
 8000cde:	4630      	mov	r0, r6
 8000ce0:	e7d4      	b.n	8000c8c <__udivmoddi4+0x24c>
 8000ce2:	46d6      	mov	lr, sl
 8000ce4:	e77f      	b.n	8000be6 <__udivmoddi4+0x1a6>
 8000ce6:	4463      	add	r3, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e74d      	b.n	8000b88 <__udivmoddi4+0x148>
 8000cec:	4606      	mov	r6, r0
 8000cee:	4623      	mov	r3, r4
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	e70f      	b.n	8000b14 <__udivmoddi4+0xd4>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	e730      	b.n	8000b5c <__udivmoddi4+0x11c>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct =
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
    { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b38      	ldr	r3, [pc, #224]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a37      	ldr	r2, [pc, #220]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a30      	ldr	r2, [pc, #192]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b2e      	ldr	r3, [pc, #184]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b2a      	ldr	r3, [pc, #168]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a29      	ldr	r2, [pc, #164]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a22      	ldr	r2, [pc, #136]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <MX_GPIO_Init+0xfc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_4 | LD2_Pin | GPIO_PIN_7,
 8000d86:	2200      	movs	r2, #0
 8000d88:	21b2      	movs	r1, #178	@ 0xb2
 8000d8a:	481d      	ldr	r0, [pc, #116]	@ (8000e00 <MX_GPIO_Init+0x100>)
 8000d8c:	f000 ff32 	bl	8001bf4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d96:	481b      	ldr	r0, [pc, #108]	@ (8000e04 <MX_GPIO_Init+0x104>)
 8000d98:	f000 ff2c 	bl	8001bf4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = B1_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4815      	ldr	r0, [pc, #84]	@ (8000e08 <MX_GPIO_Init+0x108>)
 8000db4:	f000 fd82 	bl	80018bc <HAL_GPIO_Init>

    /*Configure GPIO pins : PA1 PA4 PAPin PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | LD2_Pin | GPIO_PIN_7;
 8000db8:	23b2      	movs	r3, #178	@ 0xb2
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <MX_GPIO_Init+0x100>)
 8000dd0:	f000 fd74 	bl	80018bc <HAL_GPIO_Init>

    /*Configure GPIO pin : PB9 */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_GPIO_Init+0x104>)
 8000dee:	f000 fd65 	bl	80018bc <HAL_GPIO_Init>

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40020800 	.word	0x40020800

08000e0c <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay(uint16_t delay)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <microDelay+0x30>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8000e1e:	bf00      	nop
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <microDelay+0x30>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3f9      	bcc.n	8000e20 <microDelay+0x14>
        ;
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000044 	.word	0x20000044

08000e40 <DHT11_Start>:

uint8_t DHT11_Start(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStructPrivate =
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
    { 0 };
    GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000e58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e5c:	603b      	str	r3, [r7, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate);
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <DHT11_Start+0xe4>)
 8000e70:	f000 fd24 	bl	80018bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e7a:	482a      	ldr	r0, [pc, #168]	@ (8000f24 <DHT11_Start+0xe4>)
 8000e7c:	f000 feba 	bl	8001bf4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000e80:	2014      	movs	r0, #20
 8000e82:	f000 fc11 	bl	80016a8 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8c:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <DHT11_Start+0xe4>)
 8000e8e:	f000 feb1 	bl	8001bf4 <HAL_GPIO_WritePin>
    microDelay(30);
 8000e92:	201e      	movs	r0, #30
 8000e94:	f7ff ffba 	bl	8000e0c <microDelay>
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481f      	ldr	r0, [pc, #124]	@ (8000f24 <DHT11_Start+0xe4>)
 8000ea6:	f000 fd09 	bl	80018bc <HAL_GPIO_Init>
    microDelay(40);
 8000eaa:	2028      	movs	r0, #40	@ 0x28
 8000eac:	f7ff ffae 	bl	8000e0c <microDelay>
    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb4:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <DHT11_Start+0xe4>)
 8000eb6:	f000 fe85 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10c      	bne.n	8000eda <DHT11_Start+0x9a>
    {
        microDelay(80);
 8000ec0:	2050      	movs	r0, #80	@ 0x50
 8000ec2:	f7ff ffa3 	bl	8000e0c <microDelay>
        if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <DHT11_Start+0xe4>)
 8000ecc:	f000 fe7a 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <DHT11_Start+0x9a>
            Response = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
    }
    pMillis = HAL_GetTick();
 8000eda:	f000 fbd9 	bl	8001690 <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <DHT11_Start+0xe8>)
 8000ee2:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000ee4:	f000 fbd4 	bl	8001690 <HAL_GetTick>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a10      	ldr	r2, [pc, #64]	@ (8000f2c <DHT11_Start+0xec>)
 8000eec:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000eee:	e004      	b.n	8000efa <DHT11_Start+0xba>
    {
        cMillis = HAL_GetTick();
 8000ef0:	f000 fbce 	bl	8001690 <HAL_GetTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <DHT11_Start+0xec>)
 8000ef8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <DHT11_Start+0xe4>)
 8000f00:	f000 fe60 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <DHT11_Start+0xd8>
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <DHT11_Start+0xe8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1c9a      	adds	r2, r3, #2
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <DHT11_Start+0xec>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8eb      	bhi.n	8000ef0 <DHT11_Start+0xb0>
    }
    return Response;
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400
 8000f28:	20000030 	.word	0x20000030
 8000f2c:	20000034 	.word	0x20000034

08000f30 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t a, b;
    for (a = 0; a < 8; a++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e066      	b.n	800100a <DHT11_Read+0xda>
    {
        pMillis = HAL_GetTick();
 8000f3c:	f000 fba8 	bl	8001690 <HAL_GetTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a36      	ldr	r2, [pc, #216]	@ (800101c <DHT11_Read+0xec>)
 8000f44:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000f46:	f000 fba3 	bl	8001690 <HAL_GetTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a34      	ldr	r2, [pc, #208]	@ (8001020 <DHT11_Read+0xf0>)
 8000f4e:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000f50:	e004      	b.n	8000f5c <DHT11_Read+0x2c>
                && pMillis + 2 > cMillis)
        {
            cMillis = HAL_GetTick();
 8000f52:	f000 fb9d 	bl	8001690 <HAL_GetTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a31      	ldr	r2, [pc, #196]	@ (8001020 <DHT11_Read+0xf0>)
 8000f5a:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000f5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f60:	4830      	ldr	r0, [pc, #192]	@ (8001024 <DHT11_Read+0xf4>)
 8000f62:	f000 fe2f 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
                && pMillis + 2 > cMillis)
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <DHT11_Read+0x4a>
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <DHT11_Read+0xec>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1c9a      	adds	r2, r3, #2
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <DHT11_Read+0xf0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d8eb      	bhi.n	8000f52 <DHT11_Read+0x22>
        }
        microDelay(40);
 8000f7a:	2028      	movs	r0, #40	@ 0x28
 8000f7c:	f7ff ff46 	bl	8000e0c <microDelay>
        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f84:	4827      	ldr	r0, [pc, #156]	@ (8001024 <DHT11_Read+0xf4>)
 8000f86:	f000 fe1d 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10e      	bne.n	8000fae <DHT11_Read+0x7e>
            b &= ~(1 << (7 - a));
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2201      	movs	r2, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	71bb      	strb	r3, [r7, #6]
 8000fac:	e00b      	b.n	8000fc6 <DHT11_Read+0x96>
        else
            b |= (1 << (7 - a));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f1c3 0307 	rsb	r3, r3, #7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	71bb      	strb	r3, [r7, #6]
        pMillis = HAL_GetTick();
 8000fc6:	f000 fb63 	bl	8001690 <HAL_GetTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a13      	ldr	r2, [pc, #76]	@ (800101c <DHT11_Read+0xec>)
 8000fce:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000fd0:	f000 fb5e 	bl	8001690 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <DHT11_Read+0xf0>)
 8000fd8:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000fda:	e004      	b.n	8000fe6 <DHT11_Read+0xb6>
                && pMillis + 2 > cMillis)
        {
            cMillis = HAL_GetTick();
 8000fdc:	f000 fb58 	bl	8001690 <HAL_GetTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <DHT11_Read+0xf0>)
 8000fe4:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000fe6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fea:	480e      	ldr	r0, [pc, #56]	@ (8001024 <DHT11_Read+0xf4>)
 8000fec:	f000 fdea 	bl	8001bc4 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
                && pMillis + 2 > cMillis)
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <DHT11_Read+0xd4>
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <DHT11_Read+0xec>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1c9a      	adds	r2, r3, #2
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <DHT11_Read+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8eb      	bhi.n	8000fdc <DHT11_Read+0xac>
    for (a = 0; a < 8; a++)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3301      	adds	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b07      	cmp	r3, #7
 800100e:	d995      	bls.n	8000f3c <DHT11_Read+0xc>
        }
    }
    return b;
 8001010:	79bb      	ldrb	r3, [r7, #6]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000030 	.word	0x20000030
 8001020:	20000034 	.word	0x20000034
 8001024:	40020400 	.word	0x40020400

08001028 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	ed2d 8b02 	vpush	{d8}
 800102e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001030:	f000 fac8 	bl	80015c4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001034:	f000 f8de 	bl	80011f4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001038:	f7ff fe62 	bl	8000d00 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800103c:	f000 fa26 	bl	800148c <MX_USART2_UART_Init>
    MX_TIM1_Init();
 8001040:	f000 f9b2 	bl	80013a8 <MX_TIM1_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim1);
 8001044:	485f      	ldr	r0, [pc, #380]	@ (80011c4 <main+0x19c>)
 8001046:	f001 fad7 	bl	80025f8 <HAL_TIM_Base_Start>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (DHT11_Start())
 800104a:	f7ff fef9 	bl	8000e40 <DHT11_Start>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80b1 	beq.w	80011b8 <main+0x190>
        {
            RHI = DHT11_Read();
 8001056:	f7ff ff6b 	bl	8000f30 <DHT11_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b5a      	ldr	r3, [pc, #360]	@ (80011c8 <main+0x1a0>)
 8001060:	701a      	strb	r2, [r3, #0]
            RHD = DHT11_Read();
 8001062:	f7ff ff65 	bl	8000f30 <DHT11_Read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <main+0x1a4>)
 800106c:	701a      	strb	r2, [r3, #0]
            TCI = DHT11_Read();
 800106e:	f7ff ff5f 	bl	8000f30 <DHT11_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b56      	ldr	r3, [pc, #344]	@ (80011d0 <main+0x1a8>)
 8001078:	701a      	strb	r2, [r3, #0]
            TCD = DHT11_Read();
 800107a:	f7ff ff59 	bl	8000f30 <DHT11_Read>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b54      	ldr	r3, [pc, #336]	@ (80011d4 <main+0x1ac>)
 8001084:	701a      	strb	r2, [r3, #0]
            SUM = DHT11_Read();
 8001086:	f7ff ff53 	bl	8000f30 <DHT11_Read>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b52      	ldr	r3, [pc, #328]	@ (80011d8 <main+0x1b0>)
 8001090:	701a      	strb	r2, [r3, #0]
            if (RHI + RHD + TCI + TCD == SUM)
 8001092:	4b4d      	ldr	r3, [pc, #308]	@ (80011c8 <main+0x1a0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b4c      	ldr	r3, [pc, #304]	@ (80011cc <main+0x1a4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4413      	add	r3, r2
 800109e:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <main+0x1a8>)
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a4b      	ldr	r2, [pc, #300]	@ (80011d4 <main+0x1ac>)
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <main+0x1b0>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d14b      	bne.n	800114a <main+0x122>
            {

                tCelsius = (float) TCI + (float) (TCD / 10.0);
 80010b2:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <main+0x1a8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80010be:	4b45      	ldr	r3, [pc, #276]	@ (80011d4 <main+0x1ac>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f9d8 	bl	8000478 <__aeabi_i2d>
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <main+0x1b4>)
 80010ce:	f7ff fb67 	bl	80007a0 <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fc49 	bl	8000970 <__aeabi_d2f>
 80010de:	ee07 0a90 	vmov	s15, r0
 80010e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80010e6:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <main+0x1b8>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
                tFahrenheit = tCelsius * 9 / 5 + 32;
 80010ec:	4b3c      	ldr	r3, [pc, #240]	@ (80011e0 <main+0x1b8>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80010f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001102:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80011e4 <main+0x1bc>
 8001106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800110a:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <main+0x1c0>)
 800110c:	edc3 7a00 	vstr	s15, [r3]
                RH = (float) RHI + (float) (RHD / 10.0);
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <main+0x1a0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800111c:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <main+0x1a4>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9a9 	bl	8000478 <__aeabi_i2d>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <main+0x1b4>)
 800112c:	f7ff fb38 	bl	80007a0 <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fc1a 	bl	8000970 <__aeabi_d2f>
 800113c:	ee07 0a90 	vmov	s15, r0
 8001140:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001144:	4b29      	ldr	r3, [pc, #164]	@ (80011ec <main+0x1c4>)
 8001146:	edc3 7a00 	vstr	s15, [r3]

            }
            if (TCI < 15)
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <main+0x1a8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b0e      	cmp	r3, #14
 8001150:	d80f      	bhi.n	8001172 <main+0x14a>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2180      	movs	r1, #128	@ 0x80
 8001156:	4826      	ldr	r0, [pc, #152]	@ (80011f0 <main+0x1c8>)
 8001158:	f000 fd4c 	bl	8001bf4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2110      	movs	r1, #16
 8001160:	4823      	ldr	r0, [pc, #140]	@ (80011f0 <main+0x1c8>)
 8001162:	f000 fd47 	bl	8001bf4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <main+0x1c8>)
 800116c:	f000 fd42 	bl	8001bf4 <HAL_GPIO_WritePin>
 8001170:	e022      	b.n	80011b8 <main+0x190>
            } else if (TCI < 25)
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <main+0x1a8>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b18      	cmp	r3, #24
 8001178:	d80f      	bhi.n	800119a <main+0x172>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2180      	movs	r1, #128	@ 0x80
 800117e:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <main+0x1c8>)
 8001180:	f000 fd38 	bl	8001bf4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	2110      	movs	r1, #16
 8001188:	4819      	ldr	r0, [pc, #100]	@ (80011f0 <main+0x1c8>)
 800118a:	f000 fd33 	bl	8001bf4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2102      	movs	r1, #2
 8001192:	4817      	ldr	r0, [pc, #92]	@ (80011f0 <main+0x1c8>)
 8001194:	f000 fd2e 	bl	8001bf4 <HAL_GPIO_WritePin>
 8001198:	e00e      	b.n	80011b8 <main+0x190>
            } else
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <main+0x1c8>)
 80011a0:	f000 fd28 	bl	8001bf4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2110      	movs	r1, #16
 80011a8:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <main+0x1c8>)
 80011aa:	f000 fd23 	bl	8001bf4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2102      	movs	r1, #2
 80011b2:	480f      	ldr	r0, [pc, #60]	@ (80011f0 <main+0x1c8>)
 80011b4:	f000 fd1e 	bl	8001bf4 <HAL_GPIO_WritePin>
            }
        }
        HAL_Delay(2000);
 80011b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011bc:	f000 fa74 	bl	80016a8 <HAL_Delay>
        if (DHT11_Start())
 80011c0:	e743      	b.n	800104a <main+0x22>
 80011c2:	bf00      	nop
 80011c4:	20000044 	.word	0x20000044
 80011c8:	20000028 	.word	0x20000028
 80011cc:	20000029 	.word	0x20000029
 80011d0:	2000002a 	.word	0x2000002a
 80011d4:	2000002b 	.word	0x2000002b
 80011d8:	2000002c 	.word	0x2000002c
 80011dc:	40240000 	.word	0x40240000
 80011e0:	20000038 	.word	0x20000038
 80011e4:	42000000 	.word	0x42000000
 80011e8:	2000003c 	.word	0x2000003c
 80011ec:	20000040 	.word	0x20000040
 80011f0:	40020000 	.word	0x40020000

080011f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	@ 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f001 ff72 	bl	80030ec <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
    { 0 };

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	@ 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001240:	4a20      	ldr	r2, [pc, #128]	@ (80012c4 <SystemClock_Config+0xd0>)
 8001242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125c:	2310      	movs	r3, #16
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001268:	2308      	movs	r3, #8
 800126a:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 72;
 800126c:	2348      	movs	r3, #72	@ 0x48
 800126e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001274:	2307      	movs	r3, #7
 8001276:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fcd3 	bl	8001c28 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x98>
    {
        Error_Handler();
 8001288:	f000 f81e 	bl	80012c8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 ff35 	bl	8002118 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 80012b4:	f000 f808 	bl	80012c8 <Error_Handler>
    }
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	@ 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
 \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
    __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_MspInit+0x4c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001312:	2007      	movs	r0, #7
 8001314:	f000 fa9e 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800

08001324 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800137a:	f000 f975 	bl	8001668 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig =
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
    { 0 };
    TIM_MasterConfigTypeDef sMasterConfig =
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
    { 0 };

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <MX_TIM1_Init+0x9c>)
 80013c8:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013cc:	2247      	movs	r2, #71	@ 0x47
 80013ce:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013dc:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f0:	4813      	ldr	r0, [pc, #76]	@ (8001440 <MX_TIM1_Init+0x98>)
 80013f2:	f001 f8b1 	bl	8002558 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x58>
    {
        Error_Handler();
 80013fc:	f7ff ff64 	bl	80012c8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001404:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <MX_TIM1_Init+0x98>)
 800140e:	f001 f94d 	bl	80026ac <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x74>
    {
        Error_Handler();
 8001418:	f7ff ff56 	bl	80012c8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_TIM1_Init+0x98>)
 800142a:	f001 fb2d 	bl	8002a88 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0x90>
    {
        Error_Handler();
 8001434:	f7ff ff48 	bl	80012c8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000044 	.word	0x20000044
 8001444:	40010000 	.word	0x40010000

08001448 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

    if (tim_baseHandle->Instance == TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <HAL_TIM_Base_MspInit+0x3c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10d      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x2e>
    {
        /* USER CODE BEGIN TIM1_MspInit 0 */

        /* USER CODE END TIM1_MspInit 0 */
        /* TIM1 clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_TIM_Base_MspInit+0x40>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_TIM_Base_MspInit+0x40>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_TIM_Base_MspInit+0x40>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM1_MspInit 1 */

        /* USER CODE END TIM1_MspInit 1 */
    }
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800

0800148c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f001 fb4e 	bl	8002b64 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80014ce:	f7ff fefb 	bl	80012c8 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000008c 	.word	0x2000008c
 80014dc:	40004400 	.word	0x40004400

080014e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct =
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
    { 0 };
    if (uartHandle->Instance == USART2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <HAL_UART_MspInit+0x84>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12b      	bne.n	800155a <HAL_UART_MspInit+0x7a>
    {
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* USART2 clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <HAL_UART_MspInit+0x88>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_UART_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	@ (8001568 <HAL_UART_MspInit+0x88>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_UART_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
         PA2     ------> USART2_TX
         PA3     ------> USART2_RX
         */
        GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800153a:	230c      	movs	r3, #12
 800153c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154a:	2307      	movs	r3, #7
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <HAL_UART_MspInit+0x8c>)
 8001556:	f000 f9b1 	bl	80018bc <HAL_GPIO_Init>

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40004400 	.word	0x40004400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001574:	f7ff ff06 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800159e:	f001 fdad 	bl	80030fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fd41 	bl	8001028 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015b4:	08003184 	.word	0x08003184
  ldr r2, =_sbss
 80015b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015bc:	200000d8 	.word	0x200000d8

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f931 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 80015f8:	f7ff fe6c 	bl	80012d4 <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f93b 	bl	80018a2 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
    {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
    {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f911 	bl	800186a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
    {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	20000008 	.word	0x20000008
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	@ (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008
 800168c:	200000d4 	.word	0x200000d4

08001690 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
    return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200000d4 	.word	0x200000d4

080016a8 <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff ffee 	bl	8001690 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
    {
        wait += (uint32_t) (uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffde 	bl	8001690 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
    {
    }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff47 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
        uint32_t SubPriority)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff5c 	bl	8001738 <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn,
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
            NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffb0 	bl	8001810 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e159      	b.n	8001b8c <HAL_GPIO_Init+0x2d0>
    {
        /* Get the IO position */
        ioposition = 0x01U << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8148 	bne.w	8001b86 <HAL_GPIO_Init+0x2ca>
        {
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x52>
                    || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb4>
            {
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
                        << position);
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf0>
            {
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x144>
            {
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t) (GPIO_Init->Alternate)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
                        << (((uint32_t) position & 0x07U) * 4U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
                temp |= ((uint32_t) (GPIO_Init->Alternate)
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a2 	beq.w	8001b86 <HAL_GPIO_Init+0x2ca>
            {
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b54      	ldr	r3, [pc, #336]	@ (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a52      	ldr	r2, [pc, #328]	@ (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a49      	ldr	r2, [pc, #292]	@ (8001bac <HAL_GPIO_Init+0x2f0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x202>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <HAL_GPIO_Init+0x2f4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x1fe>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a47      	ldr	r2, [pc, #284]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a46      	ldr	r2, [pc, #280]	@ (8001bb8 <HAL_GPIO_Init+0x2fc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x1f6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a45      	ldr	r2, [pc, #276]	@ (8001bbc <HAL_GPIO_Init+0x300>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x1f2>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001abe:	2300      	movs	r3, #0
                        << (4U * (position & 0x03U)));
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
                temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	@ (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x246>
                {
                    temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 8001b02:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x270>
                {
                    temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 8001b2c:	4a24      	ldr	r2, [pc, #144]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x29a>
                {
                    temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 8001b56:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2c4>
                {
                    temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 8001b80:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f aea2 	bls.w	80018d8 <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
    GPIO_PinState bitstatus;

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_GPIO_ReadPin+0x1e>
    {
        bitstatus = GPIO_PIN_SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e001      	b.n	8001be6 <HAL_GPIO_ReadPin+0x22>
    } else
    {
        bitstatus = GPIO_PIN_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
        GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
    {
        GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
    } else
    {
        GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
    }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
        RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart, pll_config;

    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
    {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e267      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d075      	beq.n	8001d32 <HAL_RCC_OscConfig+0x10a>
            == RCC_OSCILLATORTYPE_HSE)
    {
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c46:	4b88      	ldr	r3, [pc, #544]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x44>
                || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c52:	4b85      	ldr	r3, [pc, #532]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
                        && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001c5e:	4b82      	ldr	r3, [pc, #520]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
                                == RCC_PLLCFGR_PLLSRC_HSE)))
        {
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x108>
                    && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x108>
            {
                return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e242      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
            }
        } else
        {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x74>
 8001c8e:	4b76      	ldr	r3, [pc, #472]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a75      	ldr	r2, [pc, #468]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b70      	ldr	r3, [pc, #448]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6f      	ldr	r2, [pc, #444]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6c      	ldr	r2, [pc, #432]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001cc0:	4b69      	ldr	r3, [pc, #420]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a68      	ldr	r2, [pc, #416]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a65      	ldr	r2, [pc, #404]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xe0>
            {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8001ce0:	f7ff fcd6 	bl	8001690 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xd2>
                {
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fcd2 	bl	8001690 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xd2>
                    {
                        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e207      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xc0>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else
            {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8001d08:	f7ff fcc2 	bl	8001690 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xfa>
                {
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fcbe 	bl	8001690 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xfa>
                    {
                        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1f3      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b51      	ldr	r3, [pc, #324]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0xe8>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d30:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1de>
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(
                IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x13a>
                || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x168>
                        && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001d56:	4b44      	ldr	r3, [pc, #272]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x168>
                                == RCC_PLLCFGR_PLLSRC_HSI)))
        {
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x152>
                    && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x152>
            {
                return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c7      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else
            {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4937      	ldr	r1, [pc, #220]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x1de>
                        RCC_OscInitStruct->HSICalibrationValue);
            }
        } else
        {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1b2>
            {
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_OscConfig+0x244>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8001d9e:	f7ff fc77 	bl	8001690 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x190>
                {
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fc73 	bl	8001690 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x190>
                    {
                        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a8      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4925      	ldr	r1, [pc, #148]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x1de>
                        RCC_OscInitStruct->HSICalibrationValue);
            } else
            {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 8001dda:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_RCC_OscConfig+0x244>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8001de0:	f7ff fc56 	bl	8001690 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1d2>
                {
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff fc52 	bl	8001690 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1d2>
                    {
                        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e187      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d036      	beq.n	8001e80 <HAL_RCC_OscConfig+0x258>
    {
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <HAL_RCC_OscConfig+0x220>
        {
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_RCC_OscConfig+0x248>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e20:	f7ff fc36 	bl	8001690 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x212>
            {
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc32 	bl	8001690 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x212>
                {
                    return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e167      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x200>
 8001e46:	e01b      	b.n	8001e80 <HAL_RCC_OscConfig+0x258>
                }
            }
        } else
        {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_RCC_OscConfig+0x248>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8001e4e:	f7ff fc1f 	bl	8001690 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	e00e      	b.n	8001e74 <HAL_RCC_OscConfig+0x24c>
            {
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e56:	f7ff fc1b 	bl	8001690 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d907      	bls.n	8001e74 <HAL_RCC_OscConfig+0x24c>
                {
                    return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e150      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	42470000 	.word	0x42470000
 8001e70:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ea      	bne.n	8001e56 <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8097 	beq.w	8001fbc <HAL_RCC_OscConfig+0x394>
            == RCC_OSCILLATORTYPE_LSE)
    {
        FlagStatus pwrclkchanged = RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b81      	ldr	r3, [pc, #516]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_RCC_OscConfig+0x296>
        {
            __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b7a      	ldr	r3, [pc, #488]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b77      	ldr	r3, [pc, #476]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d118      	bne.n	8001efc <HAL_RCC_OscConfig+0x2d4>
        {
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eca:	4b74      	ldr	r3, [pc, #464]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a73      	ldr	r2, [pc, #460]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 8001ed6:	f7ff fbdb 	bl	8001690 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
            {
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7ff fbd7 	bl	8001690 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x2c8>
                {
                    return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e10c      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_OscConfig+0x474>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2ea>
 8001f04:	4b64      	ldr	r3, [pc, #400]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f08:	4a63      	ldr	r2, [pc, #396]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x324>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x30c>
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f26:	4b5c      	ldr	r3, [pc, #368]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x324>
 8001f34:	4b58      	ldr	r3, [pc, #352]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a57      	ldr	r2, [pc, #348]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f40:	4b55      	ldr	r3, [pc, #340]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4a54      	ldr	r2, [pc, #336]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCC_OscConfig+0x358>
        {
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f54:	f7ff fb9c 	bl	8001690 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x34a>
            {
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fb98 	bl	8001690 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x34a>
                {
                    return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0cb      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	4b49      	ldr	r3, [pc, #292]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCC_OscConfig+0x334>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x382>
                }
            }
        } else
        {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8001f80:	f7ff fb86 	bl	8001690 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x376>
            {
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff fb82 	bl	8001690 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x376>
                {
                    return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0b5      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_RCC_OscConfig+0x394>
        {
            __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	4b39      	ldr	r3, [pc, #228]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	4a38      	ldr	r2, [pc, #224]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	@ 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a1 	beq.w	8002108 <HAL_RCC_OscConfig+0x4e0>
    {
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d05c      	beq.n	800208c <HAL_RCC_OscConfig+0x464>
        {
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d141      	bne.n	800205e <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8001fda:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_RCC_OscConfig+0x478>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8001fe0:	f7ff fb56 	bl	8001690 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x3d2>
                {
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff fb52 	bl	8001690 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x3d2>
                    {
                        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e087      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	3b01      	subs	r3, #1
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	491b      	ldr	r1, [pc, #108]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                        (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_OscConfig+0x478>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002036:	f7ff fb2b 	bl	8001690 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x428>
                {
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fb27 	bl	8001690 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x428>
                    {
                        return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e05c      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x416>
 800205c:	e054      	b.n	8002108 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else
            {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_RCC_OscConfig+0x478>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8002064:	f7ff fb14 	bl	8001690 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x456>
                {
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff fb10 	bl	8001690 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x456>
                    {
                        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e045      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCC_OscConfig+0x470>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x444>
 800208a:	e03d      	b.n	8002108 <HAL_RCC_OscConfig+0x4e0>
                }
            }
        } else
        {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x47c>
            {
                return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e038      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
 8002098:	40023800 	.word	0x40023800
 800209c:	40007000 	.word	0x40007000
 80020a0:	42470060 	.word	0x42470060
            } else
            {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x4ec>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d028      	beq.n	8002104 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
                                != RCC_OscInitStruct->PLL.PLLSource)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80020bc:	429a      	cmp	r2, r3
 80020be:	d121      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
                                != (RCC_OscInitStruct->PLL.PLLM)
                                        << RCC_PLLCFGR_PLLM_Pos)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d11a      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020d4:	4013      	ands	r3, r2
                                != (RCC_OscInitStruct->PLL.PLLN)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
                                        << RCC_PLLCFGR_PLLN_Pos)
 80020da:	0192      	lsls	r2, r2, #6
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d111      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
                                != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	3b01      	subs	r3, #1
                                        << RCC_PLLCFGR_PLLP_Pos)
 80020ee:	041b      	lsls	r3, r3, #16
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
                                != (RCC_OscInitStruct->PLL.PLLQ
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                        << RCC_PLLCFGR_PLLQ_Pos)))
 80020fe:	061b      	lsls	r3, r3, #24
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x4e0>
#endif
                {
                    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800

08002118 <HAL_RCC_ClockConfig>:
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
        uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
    {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0cc      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d90c      	bls.n	8002154 <HAL_RCC_ClockConfig+0x3c>
    {
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x3c>
        {
            return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x8a>
            == RCC_CLOCKTYPE_HCLK)
    {
        /* Set the highest APBx dividers in order to ensure that we do not go through
         a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x60>
                == RCC_CLOCKTYPE_PCLK1)
        {
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x78>
                == RCC_CLOCKTYPE_PCLK2)
        {
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800218e:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d044      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
            == RCC_CLOCKTYPE_SYSCLK)
    {
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xae>
        {
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d119      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
            {
                return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xbe>
                || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
        {
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
            {
                return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
        }
        /* HSI is selected as System Clock Source */
        else
        {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
            {
                return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e067      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4934      	ldr	r1, [pc, #208]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa42 	bl	8001690 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
                != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
        {
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7ff fa3e 	bl	8001690 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
            {
                return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002226:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 020c 	and.w	r2, r3, #12
                != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d20c      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x148>
    {
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x148>
        {
            return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x166>
            == RCC_CLOCKTYPE_PCLK1)
    {
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
                RCC_ClkInitStruct->APB1CLKDivider);
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x186>
            == RCC_CLOCKTYPE_PCLK2)
    {
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
                ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
            >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
    SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80022b6:	4a09      	ldr	r2, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f9a2 	bl	8001608 <HAL_InitTick>

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	0800315c 	.word	0x0800315c
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_RCC_GetSysClockFreq>:
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b094      	sub	sp, #80	@ 0x50
 80022ea:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f0:	2300      	movs	r3, #0
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fc:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d00d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x40>
 8002308:	2b08      	cmp	r3, #8
 800230a:	f200 80e1 	bhi.w	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x3a>
 8002316:	e0db      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x1ec>
    {
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 8002318:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 800231c:	e0db      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 800231e:	4b73      	ldr	r3, [pc, #460]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8002322:	e0d8      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b6d      	ldr	r3, [pc, #436]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x11e>
        {
            /* HSE used as PLL clock source */
            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800233a:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800233c:	685b      	ldr	r3, [r3, #4]
                            >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800233e:	099b      	lsrs	r3, r3, #6
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002340:	2200      	movs	r2, #0
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002344:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	633b      	str	r3, [r7, #48]	@ 0x30
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	@ 0x34
 8002352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002356:	4622      	mov	r2, r4
 8002358:	462b      	mov	r3, r5
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4621      	mov	r1, r4
 8002370:	1a51      	subs	r1, r2, r1
 8002372:	6139      	str	r1, [r7, #16]
 8002374:	4629      	mov	r1, r5
 8002376:	eb63 0301 	sbc.w	r3, r3, r1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002388:	4659      	mov	r1, fp
 800238a:	018b      	lsls	r3, r1, #6
 800238c:	4651      	mov	r1, sl
 800238e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002392:	4651      	mov	r1, sl
 8002394:	018a      	lsls	r2, r1, #6
 8002396:	4651      	mov	r1, sl
 8002398:	ebb2 0801 	subs.w	r8, r2, r1
 800239c:	4659      	mov	r1, fp
 800239e:	eb63 0901 	sbc.w	r9, r3, r1
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	eb18 0303 	adds.w	r3, r8, r3
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	462b      	mov	r3, r5
 80023c4:	eb49 0303 	adc.w	r3, r9, r3
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023d6:	4629      	mov	r1, r5
 80023d8:	024b      	lsls	r3, r1, #9
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023e0:	4621      	mov	r1, r4
 80023e2:	024a      	lsls	r2, r1, #9
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
                            >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80023e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023f4:	f7fe fb0c 	bl	8000a10 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80023fc:	4613      	mov	r3, r2
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002400:	e058      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x1d0>
        } else
        {
            /* HSI used as PLL clock source */
            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002402:	4b38      	ldr	r3, [pc, #224]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
                            >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002406:	099b      	lsrs	r3, r3, #6
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002408:	2200      	movs	r2, #0
 800240a:	4618      	mov	r0, r3
 800240c:	4611      	mov	r1, r2
 800240e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
 8002418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800241c:	4642      	mov	r2, r8
 800241e:	464b      	mov	r3, r9
 8002420:	f04f 0000 	mov.w	r0, #0
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	0159      	lsls	r1, r3, #5
 800242a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800242e:	0150      	lsls	r0, r2, #5
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4641      	mov	r1, r8
 8002436:	ebb2 0a01 	subs.w	sl, r2, r1
 800243a:	4649      	mov	r1, r9
 800243c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800244c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002454:	ebb2 040a 	subs.w	r4, r2, sl
 8002458:	eb63 050b 	sbc.w	r5, r3, fp
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	00eb      	lsls	r3, r5, #3
 8002466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800246a:	00e2      	lsls	r2, r4, #3
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4643      	mov	r3, r8
 8002472:	18e3      	adds	r3, r4, r3
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	464b      	mov	r3, r9
 8002478:	eb45 0303 	adc.w	r3, r5, r3
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800248a:	4629      	mov	r1, r5
 800248c:	028b      	lsls	r3, r1, #10
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002494:	4621      	mov	r1, r4
 8002496:	028a      	lsls	r2, r1, #10
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
                            >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800249c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	61fa      	str	r2, [r7, #28]
 80024a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a8:	f7fe fab2 	bl	8000a10 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80024b0:	4613      	mov	r3, r2
 80024b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
                + 1U) * 2U);
 80024be:	3301      	adds	r3, #1
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40

        sysclockfreq = pllvco / pllp;
 80024c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80024ce:	e002      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
        sysclockfreq = HSI_VALUE;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d2:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80024d4:	bf00      	nop
    }
    }
    return sysclockfreq;
 80024d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3750      	adds	r7, #80	@ 0x50
 80024dc:	46bd      	mov	sp, r7
 80024de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200

080024f0 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq()
 800250c:	f7ff fff0 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
            >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0a9b      	lsrs	r3, r3, #10
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	@ (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	0800316c 	.word	0x0800316c

08002530 <HAL_RCC_GetPCLK2Freq>:
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq()
 8002534:	f7ff ffdc 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
            >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0b5b      	lsrs	r3, r3, #13
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	@ (8002554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	0800316c 	.word	0x0800316c

08002558 <HAL_TIM_Base_Init>:
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    /* Check the TIM handle allocation */
    if (htim == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_TIM_Base_Init+0x12>
    {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e041      	b.n	80025ee <HAL_TIM_Base_Init+0x96>
    assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
    assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
    assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

    if (htim->State == HAL_TIM_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_TIM_Base_Init+0x2c>
    {
        /* Allocate lock resource and initialize it */
        htim->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_TIM_Base_MspInit(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe ff62 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }

    /* Set the TIM state */
    htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the Time Base configuration */
    TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 f950 	bl	800283c <TIM_Base_SetConfig>

    /* Initialize the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

    /* Initialize the TIM channels state */
    TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Initialize the TIM state*/
    htim->State = HAL_TIM_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_TIM_Base_Start>:
 * @brief  Starts the TIM Base generation.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

    /* Check the parameters */
    assert_param(IS_TIM_INSTANCE(htim->Instance));

    /* Check the TIM state */
    if (htim->State != HAL_TIM_STATE_READY)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d001      	beq.n	8002610 <HAL_TIM_Base_Start+0x18>
    {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e03c      	b.n	800268a <HAL_TIM_Base_Start+0x92>
    }

    /* Set the TIM state */
    htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <HAL_TIM_Base_Start+0xa0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_TIM_Base_Start+0x5c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262a:	d013      	beq.n	8002654 <HAL_TIM_Base_Start+0x5c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <HAL_TIM_Base_Start+0xa4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_TIM_Base_Start+0x5c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <HAL_TIM_Base_Start+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_TIM_Base_Start+0x5c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <HAL_TIM_Base_Start+0xac>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_TIM_Base_Start+0x5c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a16      	ldr	r2, [pc, #88]	@ (80026a8 <HAL_TIM_Base_Start+0xb0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d111      	bne.n	8002678 <HAL_TIM_Base_Start+0x80>
    {
        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b06      	cmp	r3, #6
 8002664:	d010      	beq.n	8002688 <HAL_TIM_Base_Start+0x90>
        {
            __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	e007      	b.n	8002688 <HAL_TIM_Base_Start+0x90>
        }
    } else
    {
        __HAL_TIM_ENABLE(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40010000 	.word	0x40010000
 800269c:	40000400 	.word	0x40000400
 80026a0:	40000800 	.word	0x40000800
 80026a4:	40000c00 	.word	0x40000c00
 80026a8:	40014000 	.word	0x40014000

080026ac <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
        const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
    uint32_t tmpsmcr;

    /* Process Locked */
    __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_ConfigClockSource+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0b4      	b.n	8002832 <HAL_TIM_ConfigClockSource+0x186>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check the parameters */
    assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

    /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
    tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]
    tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026e6:	60bb      	str	r3, [r7, #8]
    tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ee:	60bb      	str	r3, [r7, #8]
    htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]

    switch (sClockSourceConfig->ClockSource)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002700:	d03e      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0xd4>
 8002702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002706:	f200 8087 	bhi.w	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270e:	f000 8086 	beq.w	800281e <HAL_TIM_ConfigClockSource+0x172>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002716:	d87f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b70      	cmp	r3, #112	@ 0x70
 800271a:	d01a      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xa6>
 800271c:	2b70      	cmp	r3, #112	@ 0x70
 800271e:	d87b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b60      	cmp	r3, #96	@ 0x60
 8002722:	d050      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002724:	2b60      	cmp	r3, #96	@ 0x60
 8002726:	d877      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b50      	cmp	r3, #80	@ 0x50
 800272a:	d03c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xfa>
 800272c:	2b50      	cmp	r3, #80	@ 0x50
 800272e:	d873      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d058      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d86f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b30      	cmp	r3, #48	@ 0x30
 800273a:	d064      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b30      	cmp	r3, #48	@ 0x30
 800273e:	d86b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d060      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d867      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b10      	cmp	r3, #16
 800274e:	d05a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	e062      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
        assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
        assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
        assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

        /* Configure the ETR Clock source */
        TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
                sClockSourceConfig->ClockPolarity,
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
                sClockSourceConfig->ClockFilter);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
        TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8002762:	f000 f971 	bl	8002a48 <TIM_ETR_SetConfig>

        /* Select the External clock mode1 and the ETRF trigger */
        tmpsmcr = htim->Instance->SMCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]
        tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002774:	60bb      	str	r3, [r7, #8]
        /* Write to TIMx SMCR */
        htim->Instance->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	609a      	str	r2, [r3, #8]
        break;
 800277e:	e04f      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
        assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
        assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
        assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

        /* Configure the ETR Clock source */
        TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
                sClockSourceConfig->ClockPolarity,
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
                sClockSourceConfig->ClockFilter);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
        TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8002790:	f000 f95a 	bl	8002a48 <TIM_ETR_SetConfig>
        /* Enable the External clock mode2 */
        htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027a2:	609a      	str	r2, [r3, #8]
        break;
 80027a4:	e03c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

        /* Check TI1 input conditioning related parameters */
        assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
        assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

        TIM_TI1_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
                sClockSourceConfig->ClockPolarity,
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
                sClockSourceConfig->ClockFilter);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
        TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8ce 	bl	8002954 <TIM_TI1_ConfigInputStage>
        TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2150      	movs	r1, #80	@ 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f927 	bl	8002a12 <TIM_ITRx_SetConfig>
        break;
 80027c4:	e02c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

        /* Check TI2 input conditioning related parameters */
        assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
        assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

        TIM_TI2_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
                sClockSourceConfig->ClockPolarity,
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
                sClockSourceConfig->ClockFilter);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
        TIM_TI2_ConfigInputStage(htim->Instance,
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8ed 	bl	80029b2 <TIM_TI2_ConfigInputStage>
        TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2160      	movs	r1, #96	@ 0x60
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f917 	bl	8002a12 <TIM_ITRx_SetConfig>
        break;
 80027e4:	e01c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

        /* Check TI1 input conditioning related parameters */
        assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
        assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

        TIM_TI1_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
                sClockSourceConfig->ClockPolarity,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
                sClockSourceConfig->ClockFilter);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
        TIM_TI1_ConfigInputStage(htim->Instance,
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f8ae 	bl	8002954 <TIM_TI1_ConfigInputStage>
        TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	@ 0x40
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f907 	bl	8002a12 <TIM_ITRx_SetConfig>
        break;
 8002804:	e00c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
        /* Check whether or not the timer instance supports internal trigger input */
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f000 f8fe 	bl	8002a12 <TIM_ITRx_SetConfig>
        break;
 8002816:	e003      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
        break;
 800281c:	e000      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
        break;
 800281e:	bf00      	nop
    }
    htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <TIM_Base_SetConfig>:
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
        const TIM_Base_InitTypeDef *Structure)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
    uint32_t tmpcr1;
    tmpcr1 = TIMx->CR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

    /* Set TIM Time Base Unit parameters ---------------------------------------*/
    if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <TIM_Base_SetConfig+0xfc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00f      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285a:	d00b      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a37      	ldr	r2, [pc, #220]	@ (800293c <TIM_Base_SetConfig+0x100>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a36      	ldr	r2, [pc, #216]	@ (8002940 <TIM_Base_SetConfig+0x104>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a35      	ldr	r2, [pc, #212]	@ (8002944 <TIM_Base_SetConfig+0x108>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <TIM_Base_SetConfig+0x4a>
    {
        /* Select the Counter Mode */
        tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287a:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= Structure->CounterMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    }

    if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2b      	ldr	r2, [pc, #172]	@ (8002938 <TIM_Base_SetConfig+0xfc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01b      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002894:	d017      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a28      	ldr	r2, [pc, #160]	@ (800293c <TIM_Base_SetConfig+0x100>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a27      	ldr	r2, [pc, #156]	@ (8002940 <TIM_Base_SetConfig+0x104>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00f      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a26      	ldr	r2, [pc, #152]	@ (8002944 <TIM_Base_SetConfig+0x108>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00b      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a25      	ldr	r2, [pc, #148]	@ (8002948 <TIM_Base_SetConfig+0x10c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a24      	ldr	r2, [pc, #144]	@ (800294c <TIM_Base_SetConfig+0x110>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a23      	ldr	r2, [pc, #140]	@ (8002950 <TIM_Base_SetConfig+0x114>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d108      	bne.n	80028d8 <TIM_Base_SetConfig+0x9c>
    {
        /* Set the clock division */
        tmpcr1 &= ~TIM_CR1_CKD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028cc:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= (uint32_t) Structure->ClockDivision;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
    }

    /* Set the auto-reload preload */
    MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

    TIMx->CR1 = tmpcr1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]

    /* Set the Autoreload value */
    TIMx->ARR = (uint32_t) Structure->Period;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the Prescaler value */
    TIMx->PSC = Structure->Prescaler;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28

    if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002938 <TIM_Base_SetConfig+0xfc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d103      	bne.n	800290c <TIM_Base_SetConfig+0xd0>
    {
        /* Set the Repetition Counter value */
        TIMx->RCR = Structure->RepetitionCounter;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
    TIMx->EGR = TIM_EGR_UG;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	615a      	str	r2, [r3, #20]

    /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
    if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <TIM_Base_SetConfig+0xee>
    {
        /* Clear the update flag */
        CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f023 0201 	bic.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]
    }
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40010000 	.word	0x40010000
 800293c:	40000400 	.word	0x40000400
 8002940:	40000800 	.word	0x40000800
 8002944:	40000c00 	.word	0x40000c00
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800

08002954 <TIM_TI1_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
        uint32_t TIM_ICFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
    uint32_t tmpccmr1;
    uint32_t tmpccer;

    /* Disable the Channel 1: Reset the CC1E Bit */
    tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	617b      	str	r3, [r7, #20]
    TIMx->CCER &= ~TIM_CCER_CC1E;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
    tmpccmr1 = TIMx->CCMR1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	613b      	str	r3, [r7, #16]

    /* Set the filter */
    tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297e:	613b      	str	r3, [r7, #16]
    tmpccmr1 |= (TIM_ICFilter << 4U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 030a 	bic.w	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]
    tmpccer |= TIM_ICPolarity;
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

    /* Write to TIMx CCMR1 and CCER registers */
    TIMx->CCMR1 = tmpccmr1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	619a      	str	r2, [r3, #24]
    TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <TIM_TI2_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
        uint32_t TIM_ICFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
    uint32_t tmpccmr1;
    uint32_t tmpccer;

    /* Disable the Channel 2: Reset the CC2E Bit */
    tmpccer = TIMx->CCER;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]
    TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f023 0210 	bic.w	r2, r3, #16
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	621a      	str	r2, [r3, #32]
    tmpccmr1 = TIMx->CCMR1;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	613b      	str	r3, [r7, #16]

    /* Set the filter */
    tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029dc:	613b      	str	r3, [r7, #16]
    tmpccmr1 |= (TIM_ICFilter << 12U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	031b      	lsls	r3, r3, #12
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029ee:	617b      	str	r3, [r7, #20]
    tmpccer |= (TIM_ICPolarity << 4U);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

    /* Write to TIMx CCMR1 and CCER registers */
    TIMx->CCMR1 = tmpccmr1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	619a      	str	r2, [r3, #24]
    TIMx->CCER = tmpccer;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
    uint32_t tmpsmcr;

    /* Get the TIMx SMCR register value */
    tmpsmcr = TIMx->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
    /* Reset the TS Bits */
    tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
    /* Set the Input Trigger source and the slave mode*/
    tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
    /* Write to TIMx SMCR */
    TIMx->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
        uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
    uint32_t tmpsmcr;

    tmpsmcr = TIMx->SMCR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	617b      	str	r3, [r7, #20]

    /* Reset the ETR Bits */
    tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a62:	617b      	str	r3, [r7, #20]

    /* Set the Prescaler, the Filter value and the Polarity */
    tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
            | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
    tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

    /* Write to TIMx SMCR */
    TIMx->SMCR = tmpsmcr;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_MasterConfigSynchronization>:
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
    assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
    assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

    /* Check input state */
    __HAL_LOCK(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e050      	b.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the handler state */
    htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Get the TIMx CR2 register value */
    tmpcr2 = htim->Instance->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	60fb      	str	r3, [r7, #12]

    /* Get the TIMx SMCR register value */
    tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]

    /* Reset the MMS Bits */
    tmpcr2 &= ~TIM_CR2_MMS;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO source */
    tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

    /* Update TIMx CR2 */
    htim->Instance->CR2 = tmpcr2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]

    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aec:	d013      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	@ (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a15      	ldr	r2, [pc, #84]	@ (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
    {
        /* Reset the MSM Bit */
        tmpsmcr &= ~TIM_SMCR_MSM;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1c:	60bb      	str	r3, [r7, #8]
        /* Set master mode */
        tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]

        /* Update TIMx SMCR */
        htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    }

    /* Change the htim state */
    htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40014000 	.word	0x40014000

08002b64 <HAL_UART_Init>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
    {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e042      	b.n	8002bfc <HAL_UART_Init+0x98>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x2c>
    {
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fca8 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	@ 0x24
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ba6:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f82b 	bl	8002c04 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bbc:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bcc:	615a      	str	r2, [r3, #20]
            (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bdc:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_SetConfig>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0c0      	sub	sp, #256	@ 0x100
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	ea40 0301 	orr.w	r3, r0, r1
 8002c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
            | huart->Init.Mode | huart->Init.OverSampling;
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	69db      	ldr	r3, [r3, #28]
    tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    MODIFY_REG(huart->Instance->CR1,
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c5c:	f021 010c 	bic.w	r1, r1, #12
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	60d3      	str	r3, [r2, #12]
            (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
            tmpreg);

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	ea40 0301 	orr.w	r3, r0, r1
 8002c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b8f      	ldr	r3, [pc, #572]	@ (8002ed0 <UART_SetConfig+0x2cc>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0xa0>
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ed4 <UART_SetConfig+0x2d0>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d104      	bne.n	8002cae <UART_SetConfig+0xaa>
    {
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff fc44 	bl	8002530 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002cac:	e003      	b.n	8002cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7ff fc2b 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8002cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc0:	f040 810c 	bne.w	8002edc <UART_SetConfig+0x2d8>
    {
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002cce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	1891      	adds	r1, r2, r2
 8002cdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cde:	415b      	adcs	r3, r3
 8002ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	eb12 0801 	adds.w	r8, r2, r1
 8002cec:	4629      	mov	r1, r5
 8002cee:	eb43 0901 	adc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d14:	462b      	mov	r3, r5
 8002d16:	eb49 0303 	adc.w	r3, r9, r3
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d32:	460b      	mov	r3, r1
 8002d34:	18db      	adds	r3, r3, r3
 8002d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d38:	4613      	mov	r3, r2
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d48:	f7fd fe62 	bl	8000a10 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002d52:	fba3 2302 	umull	r2, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	011c      	lsls	r4, r3, #4
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d74:	415b      	adcs	r3, r3
 8002d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb43 0b01 	adc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	469b      	mov	fp, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	eb1a 0303 	adds.w	r3, sl, r3
 8002da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb4b 0303 	adc.w	r3, fp, r3
 8002db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002dde:	f7fd fe17 	bl	8000a10 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002dea:	fba3 2301 	umull	r2, r3, r3, r1
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2264      	movs	r2, #100	@ 0x64
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dfe:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 2302 	umull	r2, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e0c:	441c      	add	r4, r3
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e30:	4641      	mov	r1, r8
 8002e32:	1851      	adds	r1, r2, r1
 8002e34:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e36:	4649      	mov	r1, r9
 8002e38:	414b      	adcs	r3, r1
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e48:	4659      	mov	r1, fp
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e52:	4651      	mov	r1, sl
 8002e54:	00ca      	lsls	r2, r1, #3
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e9a:	f7fd fdb9 	bl	8000a10 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	@ 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3332      	adds	r3, #50	@ 0x32
 8002eb6:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <UART_SetConfig+0x2d4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4422      	add	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
    } else
    {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 8002ecc:	e106      	b.n	80030dc <UART_SetConfig+0x4d8>
 8002ece:	bf00      	nop
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40011400 	.word	0x40011400
 8002ed8:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	6239      	str	r1, [r7, #32]
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002efe:	4641      	mov	r1, r8
 8002f00:	1854      	adds	r4, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0501 	adc.w	r5, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f24:	464b      	mov	r3, r9
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f54:	4621      	mov	r1, r4
 8002f56:	008a      	lsls	r2, r1, #2
 8002f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f5c:	f7fd fd58 	bl	8000a10 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b60      	ldr	r3, [pc, #384]	@ (80030e8 <UART_SetConfig+0x4e4>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	011c      	lsls	r4, r3, #4
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	61b9      	str	r1, [r7, #24]
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	4641      	mov	r1, r8
 8002f92:	1851      	adds	r1, r2, r1
 8002f94:	6139      	str	r1, [r7, #16]
 8002f96:	4649      	mov	r1, r9
 8002f98:	414b      	adcs	r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fe8:	4649      	mov	r1, r9
 8002fea:	008b      	lsls	r3, r1, #2
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	008a      	lsls	r2, r1, #2
 8002ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ffa:	f7fd fd09 	bl	8000a10 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4611      	mov	r1, r2
 8003004:	4b38      	ldr	r3, [pc, #224]	@ (80030e8 <UART_SetConfig+0x4e4>)
 8003006:	fba3 2301 	umull	r2, r3, r3, r1
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2264      	movs	r2, #100	@ 0x64
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	1acb      	subs	r3, r1, r3
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	3332      	adds	r3, #50	@ 0x32
 8003018:	4a33      	ldr	r2, [pc, #204]	@ (80030e8 <UART_SetConfig+0x4e4>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	441c      	add	r4, r3
 8003026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800302a:	2200      	movs	r2, #0
 800302c:	673b      	str	r3, [r7, #112]	@ 0x70
 800302e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	415b      	adcs	r3, r3
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003076:	464b      	mov	r3, r9
 8003078:	460a      	mov	r2, r1
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	663b      	str	r3, [r7, #96]	@ 0x60
 800308a:	667a      	str	r2, [r7, #100]	@ 0x64
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003098:	4649      	mov	r1, r9
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a2:	4641      	mov	r1, r8
 80030a4:	008a      	lsls	r2, r1, #2
 80030a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030aa:	f7fd fcb1 	bl	8000a10 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <UART_SetConfig+0x4e4>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	@ 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	3332      	adds	r3, #50	@ 0x32
 80030c6:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <UART_SetConfig+0x4e4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030e2:	46bd      	mov	sp, r7
 80030e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <memset>:
 80030ec:	4402      	add	r2, r0
 80030ee:	4603      	mov	r3, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <__libc_init_array>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003134 <__libc_init_array+0x38>)
 8003100:	4c0d      	ldr	r4, [pc, #52]	@ (8003138 <__libc_init_array+0x3c>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	2600      	movs	r6, #0
 8003108:	42a6      	cmp	r6, r4
 800310a:	d109      	bne.n	8003120 <__libc_init_array+0x24>
 800310c:	4d0b      	ldr	r5, [pc, #44]	@ (800313c <__libc_init_array+0x40>)
 800310e:	4c0c      	ldr	r4, [pc, #48]	@ (8003140 <__libc_init_array+0x44>)
 8003110:	f000 f818 	bl	8003144 <_init>
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	2600      	movs	r6, #0
 800311a:	42a6      	cmp	r6, r4
 800311c:	d105      	bne.n	800312a <__libc_init_array+0x2e>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f855 3b04 	ldr.w	r3, [r5], #4
 8003124:	4798      	blx	r3
 8003126:	3601      	adds	r6, #1
 8003128:	e7ee      	b.n	8003108 <__libc_init_array+0xc>
 800312a:	f855 3b04 	ldr.w	r3, [r5], #4
 800312e:	4798      	blx	r3
 8003130:	3601      	adds	r6, #1
 8003132:	e7f2      	b.n	800311a <__libc_init_array+0x1e>
 8003134:	0800317c 	.word	0x0800317c
 8003138:	0800317c 	.word	0x0800317c
 800313c:	0800317c 	.word	0x0800317c
 8003140:	08003180 	.word	0x08003180

08003144 <_init>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr

08003150 <_fini>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr
